---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation Template - Load Balancer v2
# Define the Parameters, these are the inputs to your Cloudformation template, i.e. the arguments you pass when you apply the template to create the stack.
# You should use Parameters for things are changeable from template deployment to template deployment, e.g. usernames, passwords, database names etc.

# To apply from the command line use the below, there are some example values added, remove / slashes and put onto one line, slashes shown for clarity. All on one line.
# aws cloudformation create-stack --template-body file://loadbalancer-v2.yaml --stack-name albtest  --capabilities CAPABILITY_NAMED_IAM

# May need to be appended to the command at runtime, because you are making changes to IAM: --capabilities CAPABILITY_NAMED_IAM

# https://computingforgeeks.com/configure-aws-application-load-balancer-with-cloudformation/
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-elb.html

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 192.168.0.0/16
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-VPC"

# Public and Private Subnets

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2a
      CidrBlock: 192.168.0.0/24
      MapPublicIpOnLaunch: true # Makes any instance launched within get a public IP address assigned, note this is different from the elastic IP.
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2b
      CidrBlock: 192.168.100.0/24
      MapPublicIpOnLaunch: true # Makes any instance launched within get a public IP address assigned, note this is different from the elastic IP.
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2a
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: false # Makes any instance launched within get a public IP address assigned, note this is different from the elastic IP.
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-2b
      CidrBlock: 192.168.101.0/24
      MapPublicIpOnLaunch: false # Makes any instance launched within get a public IP address assigned, note this is different from the elastic IP.
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet-2"

# Internet Gateway and Attachment to VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Elastic IP Address for NAT Gateway
  NatGWPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

# NAT Gateway (to provide egress only Internet access from Private Subnets)
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatGWPublicIP
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatGWPublicIP.AllocationId

# Public Routing

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Private Routing

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

# Declare Load Balancer

    # ELB Security Group allowing Port 80 from anywhere
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: 'Allow inbound HTTP access to Application Load Balancer'
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # or internal
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      SecurityGroups:
      - Ref: ELBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: EC2TargetGroup
      LoadBalancerArn:
          Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref EC2Instance1
      - Id: !Ref EC2Instance2
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: EC2TargetGroup
      - Key: Port
        Value: 80

# Declare Role
# We declare the role, it will create it with an autogenerated name.

  Ec2SsmIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-Ec2SsmIamRole"
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: [sts:AssumeRole]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Ec2SsmIamRole"

  Ec2SsmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-Ec2SsmIamRole-InstanceProfileName"
      Path: /
      Roles: 
        - !Ref Ec2SsmIamRole

# eC2 Instance and security group

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: 'Allow inbound HTTP access to EC2 instance.'
        VpcId:
          Ref: VPC

  EC2SecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: "Rule to allow connections to EC2 instance from the ELBSecurityGroup"
      GroupId: !Ref EC2SecurityGroup
      SourceSecurityGroupId: !Ref ELBSecurityGroup
      FromPort: 80
      IpProtocol: tcp
      ToPort: 80

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-028a5cd4ffd2ee495 # This specifies a particular AMI Linux 2 image, youd probably want it to select a suitable from a pre-created list for each region.
      InstanceType: t2.medium
      IamInstanceProfile: !Ref Ec2SsmInstanceProfile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EC2Instance-1"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "---- UserData Start ----"
          apt update
          apt install -y apache2
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html
          echo "---- UserData Complete ----"

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-028a5cd4ffd2ee495 # This specifies a particular AMI Linux 2 image, youd probably want it to select a suitable from a pre-created list for each region.
      InstanceType: t2.medium
      IamInstanceProfile: !Ref Ec2SsmInstanceProfile
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EC2Instance-2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "---- UserData Start ----"
          apt update
          apt install -y apache2
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html
          echo "---- UserData Complete ----"

# The Outputs are bits of information that the Cloudformation template will output once it completes running.
# For example if you are creating EC2 instances, this can output the IP addresses, auto-generated name and so on.

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC

  ALBHostName:
      Description: 'Application Load Balancer Hostname'
      Value:
        !GetAtt ApplicationLoadBalancer.DNSName

  ApplicationLoadBalancer:
      Description: 'Application Load Balancer'
      Value:
        Ref: ApplicationLoadBalancer
